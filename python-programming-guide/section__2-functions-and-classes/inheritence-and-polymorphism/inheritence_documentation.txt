What is inheritance in python?
-----------------------------------------------------------------------------------------------------------------------
It is a mechanism that allows you to create a hierarchy of classes that share a set of properties and methods by
deriving a class from another class. Inheritance is the capability of one class to derive or inherit the properties
from another class.

Benefits of inheritance are:
-----------------------------------------------------------
1. It represents real-world relationships well.
2. It provides the re-usability of a code. Also, it allows us to add more features to a class without modifying it.
3. It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B
   would automatically inherit from class A.
4. Inheritance offers a simple, understandable model structure. Less development and maintenance expenses result
   from an inheritance.


Creating a Parent Class
------------------------------------------------------
# A Python program to demonstrate inheritance
class Person(object):

  # Constructor
  def __init__(self, name, id):
    self.name = name
    self.id = id

  # To check if this person is an employee
  def Display(self):
    print(self.name, self.id)

# Driver code
emp = Person("Satyam", 102) # An Object of Person
emp.Display()

Creating a Child Class
-------------------------------------------------------
class Emp(Person):

  def Print(self):
    print("Emp class called")

Emp_details = Emp("Mayank", 103)

# calling parent class function
Emp_details.Display()

# Calling child class function
Emp_details.Print()



What is an object class in Python?
-----------------------------------------------------------
Like the Java Object class, in Python (from version 3. x), the object is the root of all classes
    1. In Python 3.x, “class Test(object)” and “class Test” are same.
    2. In Python 2. x, “class Test(object)” creates a class with the object as a parent (called a new-style class), and
       “class Test” creates an old-style class (without an objecting parent).

Subclassing (Calling constructor of parent class)
-----------------------------------------------------------
In Python, every class inherits from a built-in basic class called ‘object’. The constructor i.e. the ‘__init__’
function of a class is invoked when we create an object variable or an instance of the class.

The variables defined within __init__() are called instance variables or objects.

The super() Function
-----------------------------------------------------------
The super() function is a built-in function that returns the objects that represent the parent class.
It allows to access the parent class’s methods and attributes in the child class.

Different types of Python Inheritance
-----------------------------------------------------------
There are 5 different types of inheritance in Python. They are as follows:

1. Single inheritance: When a child class inherits from only one parent class, it is called single inheritance.
2. Multiple inheritances: When a child class inherits from multiple parent classes, it is called multiple inheritances.
3. Multilevel inheritance: When we have a child and grandchild relationship. This means that a child class will inherit
from its parent class, which in turn is inheriting from its parent class.
4. Hierarchical inheritance More than one derived class can be created from a single base.
5. Hybrid inheritance: This form combines more than one form of inheritance. Basically, it is a blend of more than one
type of inheritance.

The Diamond Problem
-----------------------------------------------------------
