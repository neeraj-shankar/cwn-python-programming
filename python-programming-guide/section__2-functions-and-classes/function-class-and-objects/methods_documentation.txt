What are the different methods that can be used
-----------------------------------------------------------------------------------------------------------------------
In Python, there are three types of methods that you can define within a class: class methods, instance methods, and
static methods. Each type of method has different characteristics and use cases.

Instance Method
-----------------------------------------------------------------------------------------------------------------------
1. Instance methods are the most common type of methods in Python classes.
2. They operate on instances of the class and have access to instance-specific data and attributes.
3. The first parameter of an instance method is conventionally named self, which refers to the instance itself.
4. Instance methods can access and modify instance variables.
5. They can also call other instance methods and access class variables.

Example of instance method
-----------------------------------------------------------
class MyClass:
    def __init__(self, value):
        self.value = value

    def instance_method(self):
        return f"Instance method called with value: {self.value}"

# Creating an instance
obj = MyClass(42)

# Calling an instance method
result = obj.instance_method()
print(result)  # Output: "Instance method called with value: 42"
-----------------------------------------------------------

Class Methods
-----------------------------------------------------------------------------------------------------------------------
1. Class methods are defined using the @classmethod decorator.
2. They operate on the class itself rather than on instances.
3. The first parameter of a class method is conventionally named cls, which refers to the class.
4. Class methods can access and modify class variables, but they cannot access instance-specific data.
5. They are often used for factory methods or operations that affect the entire class.

Example  class method
-----------------------------------------------------------
class MyClass:
    class_variable = 10

    def __init__(self, value):
        self.value = value

    @classmethod
    def class_method(cls):
        return f"Class variable value: {cls.class_variable}"

# Creating an instance
obj = MyClass(42)

# Calling a class method
result = MyClass.class_method()
print(result)  # Output: "Class variable value: 10"
-----------------------------------------------------------

Static Method
-----------------------------------------------------------------------------------------------------------------------
1. Static methods are defined using the @staticmethod decorator.
2. They are not bound to the class or its instances and do not have access to instance or class variables.
3. They behave like regular functions but are placed within the class's namespace for organization.
4. Static methods are often used for utility functions that are related to the class but don't require access to instance
or class data.

Example of class method
-----------------------------------------------------------
class MathUtils:
    @staticmethod
    def add(a, b):
        return a + b

# Calling a static method
result = MathUtils.add(3, 5)
print(result)  # Output: 8
-----------------------------------------------------------
